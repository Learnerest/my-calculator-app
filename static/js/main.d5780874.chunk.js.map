{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","number","setnumber","isplus","setisplus","setfirststart","issubstract","setissubstract","isdivision","setisdivision","ismultiply","setismultiply","activenumber","setactivenumber","result","setresult","isprocess","setisprocess","isac","setisac","useEffect","map","element","length","handleValue","event","currentTarget","name","parseFloat","value","alert","className","Card","style","width","CardContent","Input","textAlign","nmbr","height","backgroundColor","minHeight","color","fontFamily","fontSize","Button","id","defaultValue","type","onClick","stlye","marginTop","CardActions","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5780874.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Input,\n} from \"@material-ui/core\";\nimport \"./App.css\";\n\nfunction App() {\n  const [number, setnumber] = useState([]);\n  const [isplus, setisplus] = useState();\n  const [isfirststart, setfirststart] = useState(false);\n  const [issubstract, setissubstract] = useState();\n  const [isdivision, setisdivision] = useState();\n  const [ismultiply, setismultiply] = useState();\n  const [activenumber, setactivenumber] = useState();\n  const [result, setresult] = useState(0);\n  const [isprocess, setisprocess] = useState(false);\n  const [isac, setisac] = useState(false);\n  useEffect(() => {\n    number.map((element) => setactivenumber(element));\n  }, [number]);\n  useEffect(() => {\n    if (number.length === 1) {\n      setresult(activenumber);\n    } else if (isplus) {\n      let newresult = result + activenumber;\n      setresult(newresult);\n    } else if (issubstract) {\n      let newresult = result - activenumber;\n      setresult(newresult);\n    } else if (ismultiply) {\n      let newresult = result * activenumber;\n      setresult(newresult);\n    } else if (isdivision) {\n      let newresult = result / activenumber;\n      setresult(newresult);\n    }\n  }, [activenumber]);\n\n  const handlePlus = (event) => {\n    if (event.currentTarget.name === \"add\" && isprocess) {\n      if (number.length > 0) {\n        setisprocess(false);\n\n        setisplus(true);\n        setfirststart(false);\n        setisdivision(false);\n        setissubstract(false);\n        setismultiply(false);\n        setisac(false);\n      }\n    }\n  };\n  const handleSubstract = (event) => {\n    if (event.currentTarget.name === \"substract\" && isprocess) {\n      if (number.length > 0) {\n        setisprocess(false);\n\n        setissubstract(true);\n        setisplus(false);\n        setisdivision(false);\n        setismultiply(false);\n        setfirststart(false);\n        setisac(false);\n      }\n    }\n  };\n  const handleDivision = (event) => {\n    if (event.currentTarget.name === \"division\") {\n      if (number.length > 0) {\n        setisprocess(false);\n\n        setisdivision(true);\n        setfirststart(false);\n        setisplus(false);\n        setismultiply(false);\n        setissubstract(false);\n        setisac(false);\n      }\n    }\n  };\n  const handleMultiply = (event) => {\n    if (event.currentTarget.name === \"multiple\" && isprocess) {\n      if (number.length > 0) {\n        setisprocess(false);\n\n        setismultiply(true);\n        setfirststart(false);\n        setisplus(false);\n        setisdivision(false);\n        setissubstract(false);\n        setisac(false);\n      }\n    }\n  };\n  const handleValue = (event) => {\n    if (event.currentTarget.name === \"number\" && isprocess === false) {\n      setnumber([...number, parseFloat(event.currentTarget.value)]);\n      setisprocess(true);\n      setisac(false);\n    } else {\n      setisac(false);\n      setisprocess(true);\n      alert(\"First You Must Choose The Process \");\n    }\n  };\n  const handleDeleteAll = (event) => {\n    if ((event.currentTarget.name = \"AC\")) {\n      setisac(true);\n      setnumber([]);\n      setresult(0);\n      setisprocess(false);\n    }\n  };\n  return (\n    <div className=\"container\">\n      <Card style={{ width: \"30%\" }}>\n        <CardContent>\n          {\" \"}\n          <Input value={!isac ? result : +\"0\"} />\n          <h1 style={{ textAlign: \"center\" }}>{result}</h1>\n          <small>Last Numbers :</small>\n          <hr />\n          {number.map((nmbr) => (\n            <h3>{nmbr}</h3>\n          ))}\n        </CardContent>\n      </Card>\n\n      <Card\n        style={{ height: \"60%\", backgroundColor: \"pink\", minHeight: \"70%\" }}\n      >\n        <CardContent\n          style={{\n            color: \"white\",\n            fontFamily: \"bold\",\n            fontSize: \"30PX\",\n            textAlign: \"center\",\n          }}\n        >\n          Control Panel\n          <hr />\n        </CardContent>\n        <CardContent style={{ textAlign: \"center\" }}>\n          <Button\n            id=\"number\"\n            defaultValue=\"7\"\n            type=\"button\"\n            name=\"number\"\n            onClick={handleValue}\n            value=\"7\"\n          >\n            7\n          </Button>\n          <Button type=\"button\" name=\"number\" onClick={handleValue} value=\"8\">\n            8\n          </Button>\n          <Button type=\"button\" name=\"number\" onClick={handleValue} value=\"9\">\n            9\n          </Button>\n        </CardContent>\n        <CardContent style={{ textAlign: \"center\" }}>\n          <Button name=\"number\" onClick={handleValue} value=\"4\">\n            4\n          </Button>\n          <Button name=\"number\" onClick={handleValue} value=\"5\">\n            5\n          </Button>\n          <Button name=\"number\" onClick={handleValue} value=\"6\">\n            6\n          </Button>\n        </CardContent>\n\n        <CardContent style={{ textAlign: \"center\" }}>\n          <Button name=\"number\" onClick={handleValue} value=\"1\">\n            1\n          </Button>\n          <Button name=\"number\" onClick={handleValue} value=\"2\">\n            2\n          </Button>\n          <Button name=\"number\" onClick={handleValue} value=\"3\">\n            3\n          </Button>\n        </CardContent>\n        <CardContent\n          style={{\n            textAlign: \"center\",\n          }}\n        >\n          <Button name=\"number\" onClick={handleValue} value=\"0\">\n            0\n          </Button>\n          <hr stlye={{ marginTop: \"30px\" }} />\n        </CardContent>\n        <CardActions>\n          <Button name=\"add\" onClick={handlePlus} value=\"+\">\n            +\n          </Button>\n          <Button name=\"substract\" onClick={handleSubstract} value=\"-\">\n            -\n          </Button>\n          <Button name=\"multiple\" onClick={handleMultiply} value=\"*\">\n            *\n          </Button>\n          <Button name=\"division\" onClick={handleDivision} value=\"/\">\n            /\n          </Button>\n          <Button name=\"AC\" onClick={handleDeleteAll}>\n            AC\n          </Button>\n        </CardActions>\n        <CardContent style={{ backgroundColor: \"white\" }}>\n          <small style={{ textAlign: \"center\" }}>\n            Created By @\n            <a href=\"https://github.com/Learnerest\"> Fatih Kurt | Learnerest</a>\n          </small>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}